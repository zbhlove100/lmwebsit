package models;

//Generated by Liubisheng
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

import play.Logger;
import play.mvc.Scope.Params;

public class Where{
	 
	 private StringBuffer wherebuf = new StringBuffer();
	 private List<Object> params = new ArrayList<Object>();
	 private String opr = " and ";
	 private String order="";
	 private String orderField="";
	 private boolean markblock = false;
	 private boolean blockisclose = true;
	 
	 private Params request_params;

	 public Where(){
	 }	 
	 
	 public Where(Params request_params){
		 this.request_params = request_params;
		 if(request_params != null){
			 orderField = request_params.get("orderField");
			 order = request_params.get("orderDirection");
		 }
		 //设置默认的排序
		 //orderField="createdAt";
		 //order="desc";
	 }

	 public void setReqestParams(Params request_params){
		 this.request_params = request_params;
		 if(request_params != null){
			 orderField = request_params.get("orderField");
			 order = request_params.get("orderDirection");
		 }		 
	 }
	 
	 private String getParam(String key){
	    return getParam(key,null);
	 }
	 
	 private String getParam(String key,String defaultval){
	    String val = request_params.get(key);
	    if("".equals(val) || val == null){
	    	 return defaultval;
	     }
	    return val;
	 }
	 
	 private void addopr(){
		 if(wherebuf.length() > 0){
			 wherebuf.append(this.opr);
		 }
		 if(markblock){
			 markblock = false;				 
			 wherebuf.append("(");		
		 }		 
	 }
	 
	 public void and(){
		 this.opr = " and ";		 
	 }
	 
	 public void or(){
		 this.opr = " or ";
	 }
	 
	 public void block(){
		 markblock = true;
		 blockisclose = false;
	 }
	 
	 public void endblock(){
		 wherebuf.append(")");
		 blockisclose = true;
	 }
	
	 public void eq(String fieldname){
		 addWhere(fieldname,"=",true);
	 }

	 public void neq(String fieldname){
		 addWhere(fieldname,"!=",true);
	 }
	 
	 public void like(String fieldname){
		 addWhere(fieldname,"like",true);
	 }
	 
	 public void bool(String fieldname){
		 if(fieldname != null){
			 String boolstr = getParam(fieldname);
			 if(boolstr !=null && !"".equals(boolstr)){
				 Boolean value = Boolean.parseBoolean(boolstr);
				 addWhereWithValue(fieldname,value,"=",true);
			 }
		 }		 
	 }
	 
	 public void isnull(String fieldname){
		 addWhereWithValue(fieldname,null,"is null",true);
	 }
	 
	 public void notnull(String fieldname){
		 addWhereWithValue(fieldname,null,"is not null",true);
	 }
	 
	 public void add(String cond){
		 addWhere(null,cond,false);
	 }
	 
	 public void add(String fieldname, String cond){
		 addWhere(fieldname,cond,false);
	 }
	 
	 public void addValue(String cond,Object value){
		 addWhereWithValue(null,value,cond,false);
	 }
	 
	 private void addWhere(String fieldname,String cond, boolean fieldiscond){
		 if(fieldname == null){
			 addWhereWithValue(null,null,cond,false);
		 }else{
			 String value = getParam(fieldname);
			 if(value !=null && !"".equals(value)){
				 addWhereWithValue(fieldname,value,cond,fieldiscond);
			 }
		 }
	 }
	 
	 private void addWhereWithValue(String fieldname, Object value, String cond, boolean fieldiscond){
	    	
	    addopr();
	    	 
	    if(fieldiscond){
	    	
	    	if(value == null){
	    		wherebuf.append(String.format("%s %s",fieldname,cond));
	    	}else{
	    		wherebuf.append(String.format("%s %s ?",fieldname,cond));
	    	}
	    	
	    }else{
	    	 if(value == null){
	    		 wherebuf.append(String.format("%s",cond));
	    	 }else{
	    		 wherebuf.append(String.format("%s ?",cond));
	    	 }
	    }
	    
	    if(value != null){	 
		    if(cond.endsWith("like")){
		    	 params.add("%%"+value+"%%");
		    }else{
		    	 params.add(value);
		     }
	    }
	 }
	 
	 public void in(String fieldname, List objects, String fieldormethod){
		 List<Object> ids = new ArrayList<Object>();
		 for(Object object:objects){
			 try{
				 Field idfield = object.getClass().getField(fieldormethod);
				 Object id = idfield.get(object);	
				 ids.add(id);
			 }catch(NoSuchFieldException nsfe){
				 try{
					 Method method = object.getClass().getMethod(fieldormethod);
					 Object id = method.invoke(object);	
					 ids.add(id);
				 }catch(Exception e){
					 Logger.error("Raise exception %s", e);
				 }
				 
			 }catch(Exception e){
				 Logger.error("Raise exception %s", e);
			 }
		 }
		 listWhere(fieldname,ids,true);
	 }
	 
	 public void in(String fieldname, List ids){
		 listWhere(fieldname,ids,true);
	 }
	 
	 public void notin(String fieldname, List ids){
		 listWhere(fieldname,ids,false);
	 }
	 public void addOrderByVar(String orderField){
	     addOrderByVar(orderField,null);
	 }
	 
	 public void addOrderByVar(String orderField,String order){
	     this.order = order;
	     this.orderField = orderField;
	     addOrder();
	 }
	 
	 public void addOrder(){
	     if(!"".equals(orderField)&&orderField!=null){
	         wherebuf.append("\n order by ");
	         wherebuf.append(orderField);
	         if(!"".equals(order)&&order!=null){
	             wherebuf.append("\n"+order);
	         }
	     }else{
	         wherebuf.append("\n order by id");
	     }
	 }
	 
	 public void listWhere(String fieldname, List ids, boolean isin){
		 if( ids != null){
			 addopr();
			 StringBuffer idssb = new StringBuffer();
			 if(!ids.isEmpty()){
				 for(Object id: ids){
					 idssb.append('\'');
					 idssb.append(id.toString());
					 idssb.append("\',");
				 }
				 idssb.setLength(idssb.length()-1);
			 }else{
				 idssb.append("''");
			 }
	    	 if(isin){
	    		 wherebuf.append(String.format("%s in (%s)",fieldname,idssb.toString()));
	    	 }else{
	    		 wherebuf.append(String.format("%s not in (%s)",fieldname,idssb.toString()));
	    	 }
	    	 //params.add(ids);
	     }
	 }

	 
	 public String where(){
		 if(!blockisclose){
			 return "Error:the where block is open in the Where object";
			// throw new Exception("The where block is open!");
		 }
		 System.out.println(wherebuf.toString());
		 return wherebuf.toString();
	 }
	 
	 public List<Object> params(){
		 return params;
	 }
	 
	 public Object[] paramsarr(){
	     System.out.println("11111111111111111111111111111111111111111111111");
	     System.out.println(params.toArray());
		 return params.toArray();
	 }	 
}


